/* Task 1, Given a category ID, name, and type, create a new category*/
INSERT INTO Category (CategoryID, Name, CategoryType)
VALUES (1,'Programming','fiction');


/* Task 2, Given a category ID, remove the record for that category*/
DELETE FROM Category
WHERE CategoryID = 1;


/* Task 3, Produce a summary report of books available in each category. The report should include the number of book titles and the average price in each category*/
SELECT categoryid, COUNT(*) AS "number of book", ROUND (AVG(price),2) AS average, SUM(price)AS "Total in Each Category"
FROM assignment.book GROUP BY categoryid ORDER BY categoryid;
SELECT COUNT(Book.BookID) AS "Total Of Books",SUM (price) AS "Total Price" FROM assignment.book;

/* Task 4, Given a publisher name, produce a report of books ordered by year and month. For each year and month the report  should show bookid, title, total number of orders for the title, total quantity and total selling value  (both  order  value and retail value).*/
SELECT Publisher.PublisherID, Publisher.name,
 Book.BookID, Book.title, 
 OrderLine.Quantity, OrderLine.UnitSellingPrice, 
 ShopOrder.OrderDate, 
 OrderLine.UnitSellingPrice * OrderLine.Quantity AS "Order Value", 
 Book.Price * OrderLine.Quantity AS "Retail Value"
FROM assignment.Publisher,
 assignment.Book, 
 assignment.OrderLine, 
 assignment.ShopOrder
WHERE assignment.Publisher.name = 'Arena Books'
AND assignment.Publisher.PublisherID = assignment.Book.PublisherID
AND assignment.Book.BookID = assignment.OrderLine.BookID
AND assignment.ShopOrder.ShopOrderID = assignment.OrderLine.ShopOrderID
ORDER BY ShopOrder.OrderDate;

/* Taks 5, Given a book ID, produce the order history (i.e. all order lines) for that book. 
The query should include order date, order title, price, unitselling price, total quantity, order value and shop name. 
Include a summary line showing the total number of copies ordered and the total selling value (hint: summary line may be produced by a separate query).*/
SELECT ShopOrder.OrderDate, Book.title, Book.Price, 
 OrderLine.UnitSellingPrice, OrderLine.Quantity,
 OrderLine.UnitSellingPrice * OrderLine.Quantity AS "Order Value", Shop.name
FROM assignment.ShopOrder,
 assignment.Book,
 assignment.OrderLine, 
 assignment.Shop
WHERE Book.BookID = assignment.OrderLine.BookID
 AND assignment.OrderLine.ShopOrderID = assignment.ShopOrder.ShopOrderID
 AND assignment.Shop.ShopID = assignment.ShopOrder.ShopID
 AND assignment.Book.BookID = 305
 ORDER BY assignment.ShopOrder.OrderDate;

 /*Summary Line for task 5*/
 SELECT SUM(OrderLine.Quantity) AS "Total Quantity", SUM(OrderLine.UnitSellingPrice * OrderLine.Quantity) AS "Total Value"
 FROM assignment.OrderLine 
 WHERE OrderLine.BookID = 305;

 /* Task 6, Given start and end dates, produce a report showing the performance of each sales representative over that period. 
 The report should begin with the rep who generated most orders by value and include total units sold and total order value. 
 It should include all sales reps.*/
SELECT SalesRep.SalesRepID, SalesRep.name, 
 COUNT(ShopOrder.ShopOrderID)AS "Total Order", 
 SUM(OrderLine.Quantity)AS "Total Unit", 
 SUM(OrderLine.UnitSellingPrice * OrderLine.Quantity) AS "Total Selling Price"
FROM assignment.SalesRep
LEFT OUTER JOIN assignment.ShopOrder
 ON SalesRep.SalesRepID = ShopOrder.SalesRepID
AND ShopOrder.OrderDate BETWEEN '2015-11-15' AND '2015-12-29'
LEFT OUTER JOIN assignment.OrderLine
 ON ShopOrder.ShopOrderID = OrderLine.ShopOrderID
AND ShopOrder.OrderDate BETWEEN '2015-11-15' AND '2015-12-29'
GROUP BY SalesRep.SalesRepID ORDER BY CASE WHEN SUM(OrderLine.Quantity * OrderLine.UnitSellingPrice) IS NULL THEN 1 ELSE 0 END,
SUM(OrderLine.Quantity * OrderLine.UnitSellingPrice); 

/* Task7, Given a category ID and discount percentage, apply a discount to 
 the standard price of all books in that category*/
UPDATE assignment.Book
SET Price = Price * 50/100
WHERE Book.CategoryID = 1;
